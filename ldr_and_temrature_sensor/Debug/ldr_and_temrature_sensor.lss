
ldr_and_temrature_sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000328  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000005  00800060  00800060  0000039c  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  0000039c  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000000c0  00000000  00000000  000003cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000008f0  00000000  00000000  0000048c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000252  00000000  00000000  00000d7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000425  00000000  00000000  00000fce  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000001e0  00000000  00000000  000013f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000266  00000000  00000000  000015d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000005bb  00000000  00000000  0000183a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000b0  00000000  00000000  00001df5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a5 36       	cpi	r26, 0x65	; 101
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <main>
  74:	0c 94 92 01 	jmp	0x324	; 0x324 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <lcmd>:
char lcd_mode=0;		//sets lcd mode

void lcmd(char a)		//COMMAND ROUTIN
{	
	const int d=20;
	PORTB =a;
  7c:	88 bb       	out	0x18, r24	; 24
	PC0OFF;	//TO MAKE SINGLE PIN AS LOW
  7e:	a8 98       	cbi	0x15, 0	; 21
	PC1OFF;
  80:	a9 98       	cbi	0x15, 1	; 21
	PC2ON;	//TO MAKE SINGLE PIN AS HIGH
  82:	aa 9a       	sbi	0x15, 2	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  84:	87 e8       	ldi	r24, 0x87	; 135
  86:	93 e1       	ldi	r25, 0x13	; 19
  88:	01 97       	sbiw	r24, 0x01	; 1
  8a:	f1 f7       	brne	.-4      	; 0x88 <lcmd+0xc>
  8c:	00 c0       	rjmp	.+0      	; 0x8e <lcmd+0x12>
  8e:	00 00       	nop
	_delay_ms(d);
	PC2OFF;
  90:	aa 98       	cbi	0x15, 2	; 21
  92:	87 e8       	ldi	r24, 0x87	; 135
  94:	93 e1       	ldi	r25, 0x13	; 19
  96:	01 97       	sbiw	r24, 0x01	; 1
  98:	f1 f7       	brne	.-4      	; 0x96 <lcmd+0x1a>
  9a:	00 c0       	rjmp	.+0      	; 0x9c <lcmd+0x20>
  9c:	00 00       	nop
  9e:	08 95       	ret

000000a0 <ldta>:
	_delay_ms(d);
}
void ldta(char a)		//DATA ROUTIN
{
	const int d=20;
	if (a=='\n')
  a0:	8a 30       	cpi	r24, 0x0A	; 10
  a2:	21 f4       	brne	.+8      	; 0xac <ldta+0xc>
	{
		lcmd(0xc0);
  a4:	80 ec       	ldi	r24, 0xC0	; 192
  a6:	0e 94 3e 00 	call	0x7c	; 0x7c <lcmd>
		return;
  aa:	08 95       	ret
	}
	PORTB =a;
  ac:	88 bb       	out	0x18, r24	; 24
	
	PC0ON;
  ae:	a8 9a       	sbi	0x15, 0	; 21
	PC1OFF;
  b0:	a9 98       	cbi	0x15, 1	; 21
	PC2ON;
  b2:	aa 9a       	sbi	0x15, 2	; 21
  b4:	87 e8       	ldi	r24, 0x87	; 135
  b6:	93 e1       	ldi	r25, 0x13	; 19
  b8:	01 97       	sbiw	r24, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <ldta+0x18>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <ldta+0x1e>
  be:	00 00       	nop
	_delay_ms(d);
	PC2OFF;
  c0:	aa 98       	cbi	0x15, 2	; 21
  c2:	87 e8       	ldi	r24, 0x87	; 135
  c4:	93 e1       	ldi	r25, 0x13	; 19
  c6:	01 97       	sbiw	r24, 0x01	; 1
  c8:	f1 f7       	brne	.-4      	; 0xc6 <ldta+0x26>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <ldta+0x2c>
  cc:	00 00       	nop
  ce:	08 95       	ret

000000d0 <lcmd4>:


void lcmd4(char a)		//COMMAND ROUTIN
{
	const int d=20;
	PORTB =(a&0xf0);
  d0:	98 2f       	mov	r25, r24
  d2:	90 7f       	andi	r25, 0xF0	; 240
  d4:	98 bb       	out	0x18, r25	; 24
	PC0OFF;	//TO MAKE SINGLE PIN AS LOW
  d6:	a8 98       	cbi	0x15, 0	; 21
	PC1OFF;
  d8:	a9 98       	cbi	0x15, 1	; 21
	PC2ON;	//TO MAKE SINGLE PIN AS HIGH
  da:	aa 9a       	sbi	0x15, 2	; 21
  dc:	e7 e8       	ldi	r30, 0x87	; 135
  de:	f3 e1       	ldi	r31, 0x13	; 19
  e0:	31 97       	sbiw	r30, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <lcmd4+0x10>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <lcmd4+0x16>
  e6:	00 00       	nop
	_delay_ms(d);
	PC2OFF;
  e8:	aa 98       	cbi	0x15, 2	; 21
  ea:	e7 e8       	ldi	r30, 0x87	; 135
  ec:	f3 e1       	ldi	r31, 0x13	; 19
  ee:	31 97       	sbiw	r30, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <lcmd4+0x1e>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <lcmd4+0x24>
  f4:	00 00       	nop
	_delay_ms(d);
	PORTB=((a<<4)&0xf0);
  f6:	f0 e1       	ldi	r31, 0x10	; 16
  f8:	8f 9f       	mul	r24, r31
  fa:	c0 01       	movw	r24, r0
  fc:	11 24       	eor	r1, r1
  fe:	88 bb       	out	0x18, r24	; 24
	PC0OFF;	//TO MAKE SINGLE PIN AS LOW
 100:	a8 98       	cbi	0x15, 0	; 21
	PC1OFF;
 102:	a9 98       	cbi	0x15, 1	; 21
	PC2ON;	//TO MAKE SINGLE PIN AS HIGH
 104:	aa 9a       	sbi	0x15, 2	; 21
 106:	87 e8       	ldi	r24, 0x87	; 135
 108:	93 e1       	ldi	r25, 0x13	; 19
 10a:	01 97       	sbiw	r24, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <lcmd4+0x3a>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <lcmd4+0x40>
 110:	00 00       	nop
	_delay_ms(d);
	PC2OFF;
 112:	aa 98       	cbi	0x15, 2	; 21
 114:	e7 e8       	ldi	r30, 0x87	; 135
 116:	f3 e1       	ldi	r31, 0x13	; 19
 118:	31 97       	sbiw	r30, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <lcmd4+0x48>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <lcmd4+0x4e>
 11e:	00 00       	nop
 120:	08 95       	ret

00000122 <initialize_LCD>:
	else
	ldta(a[i]);
}	 

void initialize_LCD(char mode,char a)		//INTIALIZE MODES(MODE,CUSOR_STATE)
{
 122:	cf 93       	push	r28
 124:	c6 2f       	mov	r28, r22
	
	
	if(mode==4)
 126:	84 30       	cpi	r24, 0x04	; 4
 128:	81 f4       	brne	.+32     	; 0x14a <initialize_LCD+0x28>
	{
		lcmd4(0x02);
 12a:	82 e0       	ldi	r24, 0x02	; 2
 12c:	0e 94 68 00 	call	0xd0	; 0xd0 <lcmd4>
		lcmd4(0x28);
 130:	88 e2       	ldi	r24, 0x28	; 40
 132:	0e 94 68 00 	call	0xd0	; 0xd0 <lcmd4>
		lcmd4(a);
 136:	8c 2f       	mov	r24, r28
 138:	0e 94 68 00 	call	0xd0	; 0xd0 <lcmd4>
		lcmd(0x01);
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	0e 94 3e 00 	call	0x7c	; 0x7c <lcmd>
		lcd_mode=4;
 142:	84 e0       	ldi	r24, 0x04	; 4
 144:	80 93 64 00 	sts	0x0064, r24
 148:	0c c0       	rjmp	.+24     	; 0x162 <initialize_LCD+0x40>
	}
	else
	{
		lcmd(0x38);
 14a:	88 e3       	ldi	r24, 0x38	; 56
 14c:	0e 94 3e 00 	call	0x7c	; 0x7c <lcmd>
		lcmd(a);
 150:	8c 2f       	mov	r24, r28
 152:	0e 94 3e 00 	call	0x7c	; 0x7c <lcmd>
		lcmd(0x01);
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	0e 94 3e 00 	call	0x7c	; 0x7c <lcmd>
		lcd_mode=8;
 15c:	88 e0       	ldi	r24, 0x08	; 8
 15e:	80 93 64 00 	sts	0x0064, r24
	}
	
	
	
}
 162:	cf 91       	pop	r28
 164:	08 95       	ret

00000166 <forward>:

#include <atmega/button.h>

void forward()
{
	PD2ON;
 166:	92 9a       	sbi	0x12, 2	; 18
	PD3OFF;
 168:	93 98       	cbi	0x12, 3	; 18
	PD4ON;
 16a:	94 9a       	sbi	0x12, 4	; 18
	PD5OFF;
 16c:	95 98       	cbi	0x12, 5	; 18
 16e:	08 95       	ret

00000170 <stop>:
	PD4OFF;
	PD5ON;
}
void stop()
{
	PD2OFF;
 170:	92 98       	cbi	0x12, 2	; 18
	PD3OFF;
 172:	93 98       	cbi	0x12, 3	; 18
	PD4OFF;
 174:	94 98       	cbi	0x12, 4	; 18
	PD5OFF;
 176:	95 98       	cbi	0x12, 5	; 18
 178:	08 95       	ret

0000017a <ASCII_conv_print>:
#include <atmega/dcmotor.h>

int c=0,d=0;

void ASCII_conv_print(int c)
{
 17a:	ef 92       	push	r14
 17c:	ff 92       	push	r15
 17e:	0f 93       	push	r16
 180:	1f 93       	push	r17
 182:	cf 93       	push	r28
 184:	df 93       	push	r29
 186:	00 d0       	rcall	.+0      	; 0x188 <ASCII_conv_print+0xe>
 188:	00 d0       	rcall	.+0      	; 0x18a <ASCII_conv_print+0x10>
 18a:	cd b7       	in	r28, 0x3d	; 61
 18c:	de b7       	in	r29, 0x3e	; 62
 18e:	9c 01       	movw	r18, r24
	unsigned char d[4];
	d[0]=c%10;
 190:	ea e0       	ldi	r30, 0x0A	; 10
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	bf 01       	movw	r22, r30
 196:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <__divmodhi4>
 19a:	89 83       	std	Y+1, r24	; 0x01
	d[1]=(c/10)%10;
 19c:	cb 01       	movw	r24, r22
 19e:	bf 01       	movw	r22, r30
 1a0:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <__divmodhi4>
 1a4:	8a 83       	std	Y+2, r24	; 0x02
	d[2]=(c/100)%10;
 1a6:	c9 01       	movw	r24, r18
 1a8:	64 e6       	ldi	r22, 0x64	; 100
 1aa:	70 e0       	ldi	r23, 0x00	; 0
 1ac:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <__divmodhi4>
 1b0:	cb 01       	movw	r24, r22
 1b2:	bf 01       	movw	r22, r30
 1b4:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <__divmodhi4>
 1b8:	8b 83       	std	Y+3, r24	; 0x03
	d[3]=c/1000;
 1ba:	c9 01       	movw	r24, r18
 1bc:	68 ee       	ldi	r22, 0xE8	; 232
 1be:	73 e0       	ldi	r23, 0x03	; 3
 1c0:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <__divmodhi4>
 1c4:	6c 83       	std	Y+4, r22	; 0x04
 1c6:	8e 01       	movw	r16, r28
 1c8:	0c 5f       	subi	r16, 0xFC	; 252
 1ca:	1f 4f       	sbci	r17, 0xFF	; 255
 1cc:	ce 01       	movw	r24, r28
 1ce:	01 96       	adiw	r24, 0x01	; 1
 1d0:	7c 01       	movw	r14, r24
	for (int i=2;i>=0;i--)
	{
		ldta(d[i]+48);
 1d2:	f8 01       	movw	r30, r16
 1d4:	82 91       	ld	r24, -Z
 1d6:	8f 01       	movw	r16, r30
 1d8:	80 5d       	subi	r24, 0xD0	; 208
 1da:	0e 94 50 00 	call	0xa0	; 0xa0 <ldta>
	unsigned char d[4];
	d[0]=c%10;
	d[1]=(c/10)%10;
	d[2]=(c/100)%10;
	d[3]=c/1000;
	for (int i=2;i>=0;i--)
 1de:	0e 15       	cp	r16, r14
 1e0:	1f 05       	cpc	r17, r15
 1e2:	b9 f7       	brne	.-18     	; 0x1d2 <ASCII_conv_print+0x58>
	{
		ldta(d[i]+48);
	}
	
	
}
 1e4:	0f 90       	pop	r0
 1e6:	0f 90       	pop	r0
 1e8:	0f 90       	pop	r0
 1ea:	0f 90       	pop	r0
 1ec:	df 91       	pop	r29
 1ee:	cf 91       	pop	r28
 1f0:	1f 91       	pop	r17
 1f2:	0f 91       	pop	r16
 1f4:	ff 90       	pop	r15
 1f6:	ef 90       	pop	r14
 1f8:	08 95       	ret

000001fa <street_light>:
void street_light()
{
	ADC1;
 1fa:	81 e4       	ldi	r24, 0x41	; 65
 1fc:	87 b9       	out	0x07, r24	; 7
	
	if (d!=ADC)
 1fe:	84 b1       	in	r24, 0x04	; 4
 200:	95 b1       	in	r25, 0x05	; 5
 202:	20 91 60 00 	lds	r18, 0x0060
 206:	30 91 61 00 	lds	r19, 0x0061
 20a:	28 17       	cp	r18, r24
 20c:	39 07       	cpc	r19, r25
 20e:	91 f0       	breq	.+36     	; 0x234 <street_light+0x3a>
	{
		d=ADC;
 210:	84 b1       	in	r24, 0x04	; 4
 212:	95 b1       	in	r25, 0x05	; 5
 214:	90 93 61 00 	sts	0x0061, r25
 218:	80 93 60 00 	sts	0x0060, r24
		while(check_ADIF);
 21c:	34 9b       	sbis	0x06, 4	; 6
 21e:	fe cf       	rjmp	.-4      	; 0x21c <street_light+0x22>
		if(c<512)
 220:	80 91 62 00 	lds	r24, 0x0062
 224:	90 91 63 00 	lds	r25, 0x0063
 228:	81 15       	cp	r24, r1
 22a:	92 40       	sbci	r25, 0x02	; 2
 22c:	14 f4       	brge	.+4      	; 0x232 <street_light+0x38>
		PC3ON;
 22e:	ab 9a       	sbi	0x15, 3	; 21
 230:	01 c0       	rjmp	.+2      	; 0x234 <street_light+0x3a>
		else
		PC3OFF;
 232:	ab 98       	cbi	0x15, 3	; 21
	}
	conv_start;
 234:	36 9a       	sbi	0x06, 6	; 6
 236:	08 95       	ret

00000238 <thermometer>:
}

void thermometer()
{
 238:	cf 93       	push	r28
 23a:	df 93       	push	r29
	ADC2;
 23c:	82 e4       	ldi	r24, 0x42	; 66
 23e:	87 b9       	out	0x07, r24	; 7
	lcmd(0x80);
 240:	80 e8       	ldi	r24, 0x80	; 128
 242:	0e 94 3e 00 	call	0x7c	; 0x7c <lcmd>
	if (c!=ADC)
 246:	84 b1       	in	r24, 0x04	; 4
 248:	95 b1       	in	r25, 0x05	; 5
 24a:	20 91 62 00 	lds	r18, 0x0062
 24e:	30 91 63 00 	lds	r19, 0x0063
 252:	28 17       	cp	r18, r24
 254:	39 07       	cpc	r19, r25
 256:	51 f1       	breq	.+84     	; 0x2ac <thermometer+0x74>
	{
		c=ADC;
 258:	24 b1       	in	r18, 0x04	; 4
 25a:	35 b1       	in	r19, 0x05	; 5
 25c:	30 93 63 00 	sts	0x0063, r19
 260:	20 93 62 00 	sts	0x0062, r18
		while(check_ADIF);
 264:	34 9b       	sbis	0x06, 4	; 6
 266:	fe cf       	rjmp	.-4      	; 0x264 <thermometer+0x2c>
		int error=c/58;
 268:	c9 01       	movw	r24, r18
 26a:	6a e3       	ldi	r22, 0x3A	; 58
 26c:	70 e0       	ldi	r23, 0x00	; 0
 26e:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <__divmodhi4>
 272:	eb 01       	movw	r28, r22
		ASCII_conv_print(c/2-error);
 274:	c9 01       	movw	r24, r18
 276:	99 23       	and	r25, r25
 278:	0c f4       	brge	.+2      	; 0x27c <thermometer+0x44>
 27a:	01 96       	adiw	r24, 0x01	; 1
 27c:	95 95       	asr	r25
 27e:	87 95       	ror	r24
 280:	8c 1b       	sub	r24, r28
 282:	9d 0b       	sbc	r25, r29
 284:	0e 94 bd 00 	call	0x17a	; 0x17a <ASCII_conv_print>
		if((c/2-error)>=32)
 288:	80 91 62 00 	lds	r24, 0x0062
 28c:	90 91 63 00 	lds	r25, 0x0063
 290:	99 23       	and	r25, r25
 292:	0c f4       	brge	.+2      	; 0x296 <thermometer+0x5e>
 294:	01 96       	adiw	r24, 0x01	; 1
 296:	95 95       	asr	r25
 298:	87 95       	ror	r24
 29a:	8c 1b       	sub	r24, r28
 29c:	9d 0b       	sbc	r25, r29
 29e:	80 97       	sbiw	r24, 0x20	; 32
 2a0:	1c f0       	brlt	.+6      	; 0x2a8 <thermometer+0x70>
			forward();
 2a2:	0e 94 b3 00 	call	0x166	; 0x166 <forward>
 2a6:	02 c0       	rjmp	.+4      	; 0x2ac <thermometer+0x74>
		else
			stop();
 2a8:	0e 94 b8 00 	call	0x170	; 0x170 <stop>
		
	}
	conv_start;
 2ac:	36 9a       	sbi	0x06, 6	; 6
}
 2ae:	df 91       	pop	r29
 2b0:	cf 91       	pop	r28
 2b2:	08 95       	ret

000002b4 <main>:

int main(void)
{
	DDRB=DDRC=DDRD=0xff;
 2b4:	8f ef       	ldi	r24, 0xFF	; 255
 2b6:	81 bb       	out	0x11, r24	; 17
 2b8:	84 bb       	out	0x14, r24	; 20
 2ba:	87 bb       	out	0x17, r24	; 23
	initialize_LCD(8,curon);
 2bc:	6e e0       	ldi	r22, 0x0E	; 14
 2be:	88 e0       	ldi	r24, 0x08	; 8
 2c0:	0e 94 91 00 	call	0x122	; 0x122 <initialize_LCD>
	ADCSRA=0XC3;
 2c4:	83 ec       	ldi	r24, 0xC3	; 195
 2c6:	86 b9       	out	0x06, r24	; 6
	
	
    while(1)
    {
		street_light();
 2c8:	0e 94 fd 00 	call	0x1fa	; 0x1fa <street_light>
		ADCSRA|=(1<<ADIF);
 2cc:	34 9a       	sbi	0x06, 4	; 6
		thermometer();
 2ce:	0e 94 1c 01 	call	0x238	; 0x238 <thermometer>
 2d2:	fa cf       	rjmp	.-12     	; 0x2c8 <main+0x14>

000002d4 <__divmodhi4>:
 2d4:	97 fb       	bst	r25, 7
 2d6:	07 2e       	mov	r0, r23
 2d8:	16 f4       	brtc	.+4      	; 0x2de <__divmodhi4+0xa>
 2da:	00 94       	com	r0
 2dc:	07 d0       	rcall	.+14     	; 0x2ec <__divmodhi4_neg1>
 2de:	77 fd       	sbrc	r23, 7
 2e0:	09 d0       	rcall	.+18     	; 0x2f4 <__divmodhi4_neg2>
 2e2:	0e 94 7e 01 	call	0x2fc	; 0x2fc <__udivmodhi4>
 2e6:	07 fc       	sbrc	r0, 7
 2e8:	05 d0       	rcall	.+10     	; 0x2f4 <__divmodhi4_neg2>
 2ea:	3e f4       	brtc	.+14     	; 0x2fa <__divmodhi4_exit>

000002ec <__divmodhi4_neg1>:
 2ec:	90 95       	com	r25
 2ee:	81 95       	neg	r24
 2f0:	9f 4f       	sbci	r25, 0xFF	; 255
 2f2:	08 95       	ret

000002f4 <__divmodhi4_neg2>:
 2f4:	70 95       	com	r23
 2f6:	61 95       	neg	r22
 2f8:	7f 4f       	sbci	r23, 0xFF	; 255

000002fa <__divmodhi4_exit>:
 2fa:	08 95       	ret

000002fc <__udivmodhi4>:
 2fc:	aa 1b       	sub	r26, r26
 2fe:	bb 1b       	sub	r27, r27
 300:	51 e1       	ldi	r21, 0x11	; 17
 302:	07 c0       	rjmp	.+14     	; 0x312 <__udivmodhi4_ep>

00000304 <__udivmodhi4_loop>:
 304:	aa 1f       	adc	r26, r26
 306:	bb 1f       	adc	r27, r27
 308:	a6 17       	cp	r26, r22
 30a:	b7 07       	cpc	r27, r23
 30c:	10 f0       	brcs	.+4      	; 0x312 <__udivmodhi4_ep>
 30e:	a6 1b       	sub	r26, r22
 310:	b7 0b       	sbc	r27, r23

00000312 <__udivmodhi4_ep>:
 312:	88 1f       	adc	r24, r24
 314:	99 1f       	adc	r25, r25
 316:	5a 95       	dec	r21
 318:	a9 f7       	brne	.-22     	; 0x304 <__udivmodhi4_loop>
 31a:	80 95       	com	r24
 31c:	90 95       	com	r25
 31e:	bc 01       	movw	r22, r24
 320:	cd 01       	movw	r24, r26
 322:	08 95       	ret

00000324 <_exit>:
 324:	f8 94       	cli

00000326 <__stop_program>:
 326:	ff cf       	rjmp	.-2      	; 0x326 <__stop_program>
